FROM ubuntu:latest

WORKDIR /app

# Setup for ROS2
RUN apt update && apt install locales -y
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
RUN export LANG=en_US.UTF-8
RUN apt install software-properties-common -y
RUN add-apt-repository universe
RUN apt update && apt install curl gnupg lsb-release -y
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

# Use bash instead of sh start
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt update 
RUN apt upgrade -y
# To prevent the ros installer from asking for location
ENV DEBIAN_FRONTEND=noninteractive

# ROS2 Humble
RUN apt-get install ros-humble-ros-base -y 

# Tools
RUN apt-get install -y \
    python3-colcon-common-extensions \
    g++ \
    ros-humble-rosbridge-suite \
    ros-humble-rviz2 \
    ~nros-humble-rqt* \
    build-essential \
    cmake \
    git-all \
    ros-humble-librealsense2* \
    ros-humble-realsense2-* \
    ros-humble-compressed-image-transport \
    ros-humble-compressed-depth-image-transport \
    python3-pip


# Node and npm
RUN curl -fsSL https://deb.nodesource.com/setup_21.x | bash - && apt-get install -y nodejs

# Past this point, the debian repository will be used to install chromium
# There are conflicts with the Ubuntu repository, so any apt installs are likely to fail
RUN curl -sSL https://ftp-master.debian.org/keys/release-11.asc | gpg --dearmor > /usr/share/keyrings/debian-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian/ bullseye main" >> /etc/apt/sources.list.d/debian.list
RUN apt update

# Dependencies for our WebRTC implementation
RUN apt install -y chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true
RUN npm install -g express puppeteer ws

# If we want to control the robotic arm using the Jetson
RUN pip3 install Jetson.GPIO

# Copy everything to the container
COPY . .

# Automatically source humble and local setup.bash
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc
RUN echo "if [ -f /app/ros/install/local_setup.bash ]; then source /app/ros/install/local_setup.bash; fi" >> ~/.bashrc
# Add some helpful aliases
RUN echo "alias al='sh /app/ros/launch/launch.sh'" >> ~/.bashrc
RUN echo "alias al_no_rs='sh /app/ros/launch/launch.sh no_realsense'" >> ~/.bashrc
RUN source ~/.bashrc

ENTRYPOINT ["docker_scripts/ros_entrypoint.sh"]
